<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-04-26T20:27:46-05:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">ben.perlmutter</title><subtitle>Programmer in development. </subtitle><author><name>Ben Perlmutter</name></author><entry><title type="html">If I Were to Do It Again, Part I: Learn the basics without spending a dime</title><link href="http://localhost:4000/blog/do-it-again/2020/04/26/If-I-Were-to-Do-It-Again-part-i.html" rel="alternate" type="text/html" title="If I Were to Do It Again, Part I: Learn the basics without spending a dime" /><published>2020-04-26T13:15:36-05:00</published><updated>2020-04-26T13:15:36-05:00</updated><id>http://localhost:4000/blog/do-it-again/2020/04/26/If-I-Were-to-Do-It-Again-part-i</id><content type="html" xml:base="http://localhost:4000/blog/do-it-again/2020/04/26/If-I-Were-to-Do-It-Again-part-i.html">&lt;p&gt;I am now about 8 months into learning software development, and it’s been 4 months since I started studying full time, and 2 months since I started the App Academy online bootcamp.&lt;/p&gt;

&lt;p&gt;The other day, I was thinking upon my journey so far, what I’ve done right, and what I’d do differently.&lt;/p&gt;

&lt;p&gt;Overall, I’m pretty happy with the choices I’ve made and the direction I’ve gone, but there is always room for improvement. In &lt;a href=&quot;/#&quot;&gt;this article&lt;/a&gt; I discuss what those steps have been.&lt;/p&gt;

&lt;p&gt;In this post, I wanted to take a moment to reflect on what, if I were to start from zero, I would do. I hope that this article can serve as guidance to anyone looking to get into the software development field. It can be daunting to start learning programming on your own. What language to start? What courses and resources to use? How much to practice?&lt;/p&gt;

&lt;p&gt;There is of course no right answer here, but if I were to start learning software development again, here is what I would do.&lt;/p&gt;

&lt;h3 id=&quot;start-slowish-and-be-cheap&quot;&gt;Start Slow(ish) and Be Cheap&lt;/h3&gt;
&lt;p&gt;Before you sign up for some bootcamp and cosign away 15% of your income for the next couple of years or quit your job to lock yourself in your parents’ basement for 6 months teaching yourself to code, you should see if you like it and get a lay of the land.&lt;/p&gt;

&lt;p&gt;Life as a developer isn’t for everyone. Sure, everyone can learn to code, but that doesn’t mean it’s something you want to devote yourself to. Coding is interesting, engaging, and a constant challenge, but it totally has it’s down sides that might mean it’s not for you. You are sitting in front of a computer screen all day, often with no company, and you often get stuck digging into problems that make you want to tear your hair out, just to name a few downsides.&lt;/p&gt;

&lt;p&gt;Before you fully commit to the life of code, learn the basics and make sure it’s the right choice for you. Plus, you’ll have a nice foundation for when/if you decide to dive full in.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I’d estimate that doing everything outlined below will take approximately 2 months if you’re studying 15hrs/week.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;top-ftw&quot;&gt;TOP FTW&lt;/h3&gt;
&lt;p&gt;For anyone looking to learn software development, I highly recommend finishing &lt;strong&gt;&lt;a href=&quot;https://theodinproject.com&quot;&gt;the Odin Project&lt;/a&gt; (TOP) WEb Development 101&lt;/strong&gt;. It’s a free online curriculum that aggregates some of the best free resources on the internet, and pieces them together into a unified curriculum, with some cool projects thrown in. It’s instructions aren’t super in-depth, but gives you just enough structure and guidance to push you along. Plus, this builds independence and self-teaching, necessary traits for any developer.&lt;/p&gt;

&lt;p&gt;TOP provides a great foundation for further learning, and you get to produce some cool projects like a &lt;a href=&quot;https://bpmutter.github.io/tomato-timer/&quot;&gt;tomato timer&lt;/a&gt; and &lt;a href=&quot;https://bpmutter.github.io/calculator/&quot;&gt;calculator&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I’d estimate finishing TOP Web Dev 101 takes around 80 hours if you want to do it right. I’d devote approx. 10-15 hrs/week for 2 months to it, so you’re getting constant practice, but can still continue with your other commitments in your life as you get a lay of the software development landscape.&lt;/p&gt;

&lt;p&gt;Once you’ve finished TOP Web Dev 101, you can probably get into virtually any bootcamp you’d like and be confident that beginning a career in software development is the right choice for you.&lt;/p&gt;

&lt;h3 id=&quot;trust-in-the-algorithms&quot;&gt;Trust in the Algorithms&lt;/h3&gt;
&lt;p&gt;In addition to the actual programming, start learning about the industry, developer culture, and computer science fundamentals. Use sites like YouTube, Medium, and reddit to wrap yourself in the culture.&lt;/p&gt;

&lt;p&gt;Many of these sites are powered by some really smart algorithms that can find content that you’ll like better than you’d be able to, so once you’ve started liking a few topics and content creators, similar stuff will start magically popping up in your feed, keeping you learning (and generating them advertising $$, but that’s a different subject).&lt;/p&gt;

&lt;h4 id=&quot;youtube&quot;&gt;YouTube!&lt;/h4&gt;
&lt;p&gt;YouTube is your best friend for learning about programming, due to its massive volume of content. Just start searching around for topics of interest, and once you watch a couple of videos the YouTube algorithm will catch on and start putting lots of relevant content in your feed.&lt;/p&gt;

&lt;p&gt;To get yourself going, here are a couple of my favorite YouTube channels for everything programming:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/channel/UC9-y-6csu5WGm29I7JiwpnA&quot;&gt;Computerphile&lt;/a&gt;: Some very high production value, high-quality deep dives into computer science topics. Not necessarily stuff you’ll use day to day, but provides a nice foundation in theory and CS history.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=O5nskjZ_GoI&amp;amp;list=PL8dPuuaLjXtNlUrzyH5r6jN9ulIgZBpdo&amp;amp;index=2&quot;&gt;Crash Course Computer Science&lt;/a&gt;: More high-quality deep dives into computer science, with an emphasis on the history of computers. What’s extra cool about these videos is that they’re a unified curriculum, not a scattershot of topics of the day, like most YouTube channels.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/channel/UCrqAGUPPMOdo0jfQ6grikZw&quot;&gt;Colt Steele&lt;/a&gt; Colt, in addition to having an awesome name, does a really good job explaining complex topics so that they’re easily accessible to beginners.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/channel/UCRLEADhMcb8WUdnQ5_Alk7g&quot;&gt;Code Drip&lt;/a&gt; - Another dude in his bedroom talking about programming and how to get a software development job. Basically a subgenre in and of itself on YouTube. Code Drip is one of my favorites, but there are many more. Search around and you’ll find more.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;A note of caution on YouTube:&lt;/strong&gt; Don’t waste your time on YouTube learn-to-code instructional videos. If it’s in a video, that means that they’re doing the work. You don’t want to just code along with that because it’s totally passive learning. You’ll barely retain anything and won’t get to engage in troubleshooting and looking stuff up—at least 3/4 the battle of programming.&lt;/p&gt;

&lt;h4 id=&quot;dont-forget-to-read-too&quot;&gt;Don’t forget to read too&lt;/h4&gt;
&lt;p&gt;There’s also a ton of great stuff on Medium, reddit and scattered around the web. I don’t have any particular recommendations here. I have read a lot of blog posts and articles about programming, but I would mostly find content just through Googling around topics and clicking on links. If I expand this article into a proper guide, I’ll come back and add some resources here.&lt;/p&gt;

&lt;h3 id=&quot;talk-to-people-doing-the-stuff-you-want-to-do&quot;&gt;Talk to People Doing the Stuff You Want to Do&lt;/h3&gt;
&lt;p&gt;Talk to some real devs! See how they entered the industry, and what their advice to you is. I was lucky enough to have lots of developer friends to talk to, and they gave me tons of invaluable advice and direction.&lt;/p&gt;

&lt;p&gt;If you don’t know any professional developers, you’re not out of luck. There are lots of other ways that you can meet people in the developer community.&lt;/p&gt;

&lt;p&gt;One thing that has always surprised me by how well it has worked for me is reaching out to people on LinkedIn. Find someone who is doing something interesting and send them a flattering message saying how you are impressed by their experience and want to chat w some questions. I’d estimate I get a &amp;gt;50% response rate, doing this and have gotten a ton of great feedback.&lt;/p&gt;

&lt;p&gt;It should be noted that if you’re going down this path, make sure that you have a decently curated profile to leave a good 1st impression and make this stranger that you just sent a message to actually want to respond to you.&lt;/p&gt;

&lt;p&gt;I’ve also heard good things about going to coding meetups. Check Facebook and Meetup for stuff near you. I’ve never actually done this, so can’t speak to it personally. But I have a couple of friends who’ve had positive experiences with Meetups, and it’s consistently mentioned round the web as a helpful tool for getting into your local developer community.&lt;/p&gt;

&lt;h3 id=&quot;step-1-wrap-up&quot;&gt;Step 1 Wrap Up&lt;/h3&gt;
&lt;p&gt;Alright that was a lot of words, but really it’s just 3 simple steps:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;The Odin Project Web Development 101&lt;/strong&gt; to learn programming fundamentals&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Watch some YouTube videos and read some blog posts&lt;/strong&gt; in your free time to learn more about the industry and computer science&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Get networking&lt;/strong&gt; to meet people in the field.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I’d estimate doing all this will take approximately 15 hrs/week for two months. And once you’re done with this, you’ll have a solid understanding of programming fundamentals, have a couple of decent projects under your belt, and know a lot more about the programming landscape.&lt;/p&gt;

&lt;p&gt;That’s a hell of a lot accomplished in 2 months, but it’s totally doable, and completely free. Not too bad.&lt;/p&gt;

&lt;h4 id=&quot;part-ii-coming-soon&quot;&gt;Part II Coming Soon…&lt;/h4&gt;
&lt;p&gt;In part II of this &lt;strong&gt;If I Were to Do It Again&lt;/strong&gt; series, I’ll talk about why you should do a bootcamp, and how to choose the right one while still continuing to learn programming.&lt;/p&gt;</content><author><name>Ben Perlmutter</name></author><summary type="html">I am now about 8 months into learning software development, and it’s been 4 months since I started studying full time, and 2 months since I started the App Academy online bootcamp. The other day, I was thinking upon my journey so far, what I’ve done right, and what I’d do differently. Overall, I’m pretty happy with the choices I’ve made and the direction I’ve gone, but there is always room for improvement. In this article I discuss what those steps have been. In this post, I wanted to take a moment to reflect on what, if I were to start from zero, I would do. I hope that this article can serve as guidance to anyone looking to get into the software development field. It can be daunting to start learning programming on your own. What language to start? What courses and resources to use? How much to practice? There is of course no right answer here, but if I were to start learning software development again, here is what I would do. Start Slow(ish) and Be Cheap Before you sign up for some bootcamp and cosign away 15% of your income for the next couple of years or quit your job to lock yourself in your parents’ basement for 6 months teaching yourself to code, you should see if you like it and get a lay of the land. Life as a developer isn’t for everyone. Sure, everyone can learn to code, but that doesn’t mean it’s something you want to devote yourself to. Coding is interesting, engaging, and a constant challenge, but it totally has it’s down sides that might mean it’s not for you. You are sitting in front of a computer screen all day, often with no company, and you often get stuck digging into problems that make you want to tear your hair out, just to name a few downsides. Before you fully commit to the life of code, learn the basics and make sure it’s the right choice for you. Plus, you’ll have a nice foundation for when/if you decide to dive full in.</summary></entry><entry><title type="html">Why I’m Becoming a Software Developer</title><link href="http://localhost:4000/blog/personal/2020/04/25/Why-I'm-Becoming-a-Developer.html" rel="alternate" type="text/html" title="Why I'm Becoming a Software Developer" /><published>2020-04-25T13:15:36-05:00</published><updated>2020-04-25T13:15:36-05:00</updated><id>http://localhost:4000/blog/personal/2020/04/25/Why-I'm-Becoming-a-Developer</id><content type="html" xml:base="http://localhost:4000/blog/personal/2020/04/25/Why-I'm-Becoming-a-Developer.html">&lt;p&gt;I can put an exact date on when I decided I wanted to become a software developer. It was the night before my 25th birthday, November 1, 2019.&lt;/p&gt;

&lt;p&gt;I was in Mexico City on vacation. I’d decided to go to CDMX for my birthday because my birthday, November 2, also the Day of the Dead, and that’s always something I’ve wanted to experience. And probably more importantly, I have a deep aversion to all the attention you get on your birthday. I wanted to not just escape that in a foreign country, but have it be overwhelmed by the attention granted to another holiday.&lt;/p&gt;

&lt;p&gt;Plus, tacos al pastor, tequila, mesoamerican pyramids, mole, and more tacos al pastor. (Side note: I gained at least 5 pounds during my 2 weeks in Mexico.)&lt;/p&gt;

&lt;p&gt;At the time I was working remotely in a marketing and sales position for a Silicon Valley startup from Medellin, Colombia. For a variety of reasons, I felt I was outgrowing the position. I knew that I wanted a way out, regardless of what’d be coming next.&lt;/p&gt;

&lt;p&gt;Concurrently, I’d started studying a bit of front end development because it was relevant to some projects for the company and a side project e-commerce store I was working on. I liked it. There was a ton to learn, instant gratification when you get something right, and lots of career opportunities when you get good at it.&lt;/p&gt;

&lt;p&gt;I was apprehensive about taking the leap into an entirely new field. It’d basically be starting from zero in a new career, and that wasn’t a decision I wanted to take lightly, especially because I’d just gotten into the world of tech and marketing less than 2 years previously.&lt;/p&gt;

&lt;p&gt;But in a hyper-cliched ¼-life crisis move, on the afternoon before my 25th birthday, I decided that I need to make a career change. I think that it was an inevitability, but the birthday provided he catylist that I needed to take the leap.&lt;/p&gt;

&lt;p&gt;The week I got back from the Mexico, I told my job I was quitting by the end of the year, and I dove deeper into programming. I’d spend the mornings and weekends upping my programming chops with the &lt;a href=&quot;https://www.theodinproject.com/&quot;&gt;Odin Project&lt;/a&gt;, and figuring out how I wanted to proceed with my studying. (I eventually decided that a bootcamp would be the best route for me, but that’s the subject for a different blog post.)&lt;/p&gt;

&lt;p&gt;The more I immerse myself in the world of programming, the more I love it, something that continues to this day.&lt;/p&gt;

&lt;p&gt;Below I talk about some of my favorite aspects of software development, which inspire me everyday to become a better programmer and learn more.&lt;/p&gt;

&lt;h2 id=&quot;infinite-learning-opportunity&quot;&gt;Infinite Learning Opportunity&lt;/h2&gt;
&lt;p&gt;I’m a nerd and I ain’t afraid to say it. I love to learn. I can and do happily spend an hour or 2 down a Wikipedia rabbit hole about mid-19th century South American interstate relations or read some weird hard sci-fi book—shout out to Isaac Asamov, Ted Chiang and Liu Cixin.&lt;/p&gt;

&lt;p&gt;The number 1 thing that I love about programming is that there is pretty much infinite learning opportunity. As much as you know, there is a helluva lot more out there. Even if you’ve mastered a certain field, you have to keep learning the fire hose of new technologies and implementations coming out or you’ll be practically a relic within 5 years.&lt;/p&gt;

&lt;p&gt;But unlike my Wikipedia rabbit holes, almost all the learning in programming is applied, so you can actually put it to use to make some cool stuff. To sweeten the deal, most everything you need to know can be found free online. That’s pretty darn cool.&lt;/p&gt;

&lt;h2 id=&quot;interesting-work&quot;&gt;Interesting Work&lt;/h2&gt;
&lt;p&gt;As a programmer, you get to work on interesting problems, and create solutions that have a genuine impact on the world. Plus, every project is different, requiring you to learn more and implement novel solutions. Those are both pretty great things to have in a job.&lt;/p&gt;

&lt;p&gt;And one thing that I love about programming is the instant gratification. Even if this isn’t talked about so much, I suspect it’s one of the chief reasons people get into programming (along with lack of athletic ability). When you’re working on something you just have to run it and you get instant feedback. Either it works or it doesn’t. More likely than not, it won’t work the first time, so you iterate until the feature works. And boom, you see it there on your screen. It gives you a little dopamine hit, and pushes you to keep going, and going and going.&lt;/p&gt;

&lt;h2 id=&quot;remote-friendliness&quot;&gt;Remote Friendliness&lt;/h2&gt;
&lt;p&gt;With 30mbs of internet and a decent laptop, you can probably work as a developer regardless of where you are (timezone permitting). This is maybe the single most appealing thing about becoming a developer  to me, as I’m a passionate traveler and devoted believer in the efficacy of remote work.&lt;/p&gt;

&lt;p&gt;I have been living abroad for the last 4 years and working remotely for US companies for 2 years prior to devoting myself to learning software full-time, from my current home in Medellin, Colombia. The prospect of having a career that gives me the flexibility to work from anywhere is deeply personally appealing.&lt;/p&gt;

&lt;p&gt;With that being said, I’ve accepted the fact that for the first couple of years of my developer career I’ll likely have to be in person as many companies only do entry-level jobs in person, and I look forward to learning from more senior developers. But as of now, it is my ultimate goal to return to remote work at some point in the not too distant future, be it in 1 year, 3 or 5.&lt;/p&gt;

&lt;h2 id=&quot;good-salaries&quot;&gt;Good Salaries&lt;/h2&gt;
&lt;p&gt;Being a developer pays. it is no secret. This is of course one of my main motivations for becoming a software developer. Anyone who says otherwise is probably a liar.&lt;/p&gt;

&lt;p&gt;Moreover, software development is probably the single best way to earn a good US salary while living outside the country, which as noted above, is very important to me.&lt;/p&gt;

&lt;p&gt;Earning a boatload of cash isn’t my principal motivation for become a developer—if making lots of money were my main goal i would have gotten into finance or gone to law school—but it certainly is something that matters to me, especially as i leave my early 20s and get into the meat of adulthood and pay for my own health insurance (thanks Obama for getting me to 26 on the parent’s tab though!).&lt;/p&gt;

&lt;h2 id=&quot;future-proof&quot;&gt;Future-Proof*&lt;/h2&gt;
&lt;p&gt;Software isn’t going anywhere…it’s going everywhere! Basically every company is a tech company these days, and if they’re not they probably should be. They need people to make that technology, and due to some gross inadequacies in the US educational system, there’s a severe shortage of practitioners in software development.&lt;/p&gt;

&lt;p&gt;So ample job opportunities will exist for software developers for the foreseeable future. That’s something I certainly have in mind as I enjoy being gainfully employed.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;*Now I don’t think software development is necessarily future-proof indefinitely. Who knows what the economy of 20 year from now…certainly not me. But I am quite confident that being a software developer is a secure job choice for the foreseeable future, say the next 20 years or so.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion-just-the-beginning&quot;&gt;Conclusion: Just the Beginning&lt;/h2&gt;
&lt;p&gt;I’m just at the beginning of my journey into the world of software development, but so far I love it, and that’s only increasing. I have a long way to go, and I’m looking forward to every step of it.&lt;/p&gt;</content><author><name>Ben Perlmutter</name></author><summary type="html">I can put an exact date on when I decided I wanted to become a software developer. It was the night before my 25th birthday, November 1, 2019. I was in Mexico City on vacation. I’d decided to go to CDMX for my birthday because my birthday, November 2, also the Day of the Dead, and that’s always something I’ve wanted to experience. And probably more importantly, I have a deep aversion to all the attention you get on your birthday. I wanted to not just escape that in a foreign country, but have it be overwhelmed by the attention granted to another holiday. Plus, tacos al pastor, tequila, mesoamerican pyramids, mole, and more tacos al pastor. (Side note: I gained at least 5 pounds during my 2 weeks in Mexico.) At the time I was working remotely in a marketing and sales position for a Silicon Valley startup from Medellin, Colombia. For a variety of reasons, I felt I was outgrowing the position. I knew that I wanted a way out, regardless of what’d be coming next. Concurrently, I’d started studying a bit of front end development because it was relevant to some projects for the company and a side project e-commerce store I was working on. I liked it. There was a ton to learn, instant gratification when you get something right, and lots of career opportunities when you get good at it. I was apprehensive about taking the leap into an entirely new field. It’d basically be starting from zero in a new career, and that wasn’t a decision I wanted to take lightly, especially because I’d just gotten into the world of tech and marketing less than 2 years previously. But in a hyper-cliched ¼-life crisis move, on the afternoon before my 25th birthday, I decided that I need to make a career change. I think that it was an inevitability, but the birthday provided he catylist that I needed to take the leap. The week I got back from the Mexico, I told my job I was quitting by the end of the year, and I dove deeper into programming. I’d spend the mornings and weekends upping my programming chops with the Odin Project, and figuring out how I wanted to proceed with my studying. (I eventually decided that a bootcamp would be the best route for me, but that’s the subject for a different blog post.) The more I immerse myself in the world of programming, the more I love it, something that continues to this day.</summary></entry></feed>