<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-07-30T20:14:08-05:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">ben.perlmutter</title><subtitle>Programmer in development.</subtitle><author><name>Ben Perlmutter</name></author><entry><title type="html">An Overview of ben.perlmutter.io</title><link href="http://localhost:4000/2020/07/04/ben-perlmutter-io.html" rel="alternate" type="text/html" title="An Overview of ben.perlmutter.io " /><published>2020-07-04T00:00:00-05:00</published><updated>2020-07-04T00:00:00-05:00</updated><id>http://localhost:4000/2020/07/04/ben-perlmutter-io</id><content type="html" xml:base="http://localhost:4000/2020/07/04/ben-perlmutter-io.html">&lt;p&gt;My personal website - &lt;em&gt;April 2020 — ongoing&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This website, &lt;a href=&quot;http://ben.perlmutter.io/&quot;&gt;ben.perlmutter.io&lt;/a&gt;, is a Jekyll site deployed onto Github Pages. It features information about me, the projects I’m working on, and my blog.&lt;/p&gt;

&lt;p&gt;The primary goal for this website, like any personal page, is to show off myself and my programming abilities. The website is a constant work in progress, and serves as something of a mad laboratory for technologies and design ideas that I’m trying out.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#benperlmutterio-at-a-glance&quot;&gt;Ben.perlmutter.io at a Glance&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#technological-overview&quot;&gt;Technological Overview&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion--next-steps&quot;&gt;Conclusion &amp;amp; Next Steps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;benperlmutterio-at-a-glance&quot;&gt;Ben.perlmutter.io at a Glance&lt;/h2&gt;
&lt;p&gt;As noted above, ben.perlmutter.io was built with the Jekyll static site generator. Jekyll provides the skeleton, and I heavily modified it with custom HTML, CSS, and Javascript to give the site its unique (and Bitmojiful) ascetic.&lt;/p&gt;

&lt;p&gt;It was an intentional design decision to use a minimalistic Jekyll website and these core frontend technologies to build out the website, rather than using a more feature-heavy static site generator like Gatsby or Hugo with their robust theme libraries. I wanted to use a cleaner canvas—while also taking advantages of certain  Jekyll features like persistent navigation and an integrated blog—to create a vision that was really my own.&lt;/p&gt;

&lt;h2 id=&quot;technological-overview&quot;&gt;Technological Overview&lt;/h2&gt;
&lt;h3 id=&quot;jekyll&quot;&gt;Jekyll&lt;/h3&gt;
&lt;p&gt;ben.perlmutter.io is based off the Jekyll minima template. As its name implies, the template is quite minimalistic. It served as a nice relatively blank canvas for me to add stuff to and build off of while also providing some nice core features to speed up the development process. Basically nothing had to be removed, only added, with the occasional overriding for stuff like font styles and colors.&lt;/p&gt;

&lt;p&gt;Jekyll gives some nice quick ways to build on the template through the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; file. And most invaluable to the site was the  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll-feed&lt;/code&gt; blog plugin. The plugin lets you write out blog posts in Markdown and deploy them with a simple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git push&lt;/code&gt;. It’s a fairly painless blogging system, and really (the original intent of Jekyll)[&lt;a href=&quot;https://tom.preston-werner.com/2008/11/17/blogging-like-a-hacker.html&quot; target=&quot;_blank&quot;&gt;#link-to-the-bloggin-like-a-hacker-post-here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Speaking of pushing git, Jekyll is also very well integrated with Github and Github pages, which made it quite easy to deploy a prototype version and continuously update the project. The site is currently hosted on Github Pages.&lt;/p&gt;

&lt;h3 id=&quot;markup-html-markdown--liquid-templating&quot;&gt;Markup: HTML, Markdown &amp;amp; Liquid Templating&lt;/h3&gt;
&lt;p&gt;Jekyll takes both HTML and Markdown as default file types. And given that you can actually write HTML in Markdown, all markdown pages can actually have a bunch of HTML in them (though the HTML can be reformatted in these pages with some funny extra divs and such thrown in).&lt;/p&gt;

&lt;p&gt;The main content is a mix between the 2 formats. The more text-heavy pages such were kept in Markdown for convenience with the others in HTML.&lt;/p&gt;

&lt;h4 id=&quot;markdown&quot;&gt;Markdown&lt;/h4&gt;
&lt;p&gt;As previously noted, all blog posts are written in Markdown.  The process of making and maintaining the website has gotten me quite proficient in it. I would go so far as to say that now Markdown is my favorite way to write documents (unless there is collaboration involved, then Google Docs all the way). Markdown makes it especially easy for anything involving a code block, which I suppose is most of my writing these days.&lt;/p&gt;

&lt;p&gt;Below is a bit of the Markdown/HTML hybrid code on the &lt;a href=&quot;https://ben.perlmutter.io/about.html&quot;&gt;About page&lt;/a&gt;. It’s also worth noting that me putting the code block here is a perfect example of how easy it is to make a code block in Markdown!&lt;/p&gt;
&lt;div class=&quot;language-md highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- /about.markdown --&amp;gt;&lt;/span&gt;
Learn more about my experience in &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/assets/ben-perlmutter-resume.pdf&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;target=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;_blank&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Ben Perlmutter resume&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;my resume&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;.

&lt;span class=&quot;gu&quot;&gt;#### Connect with Me&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;mailto:ben@perlmutter.io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;{:target=&quot;_blank&quot;} / &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Github&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;https://github.com/bpmutter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;{:target=&quot;_blank&quot;} / &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LinkedIn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;https://www.linkedin.com/in/ben-perlmutter-a410228a/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;{:target=&quot;_blank&quot;} / &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Twitter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;https://twitter.com/bpmutter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;{:target=&quot;_blank&quot;}

&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bitmoji-divider&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/assets/img/01-bitmoji-neutral.png&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bitmoji-divider__bitmoji&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/assets/img/01-bitmoji-neutral.png&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bitmoji-divider__bitmoji&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/assets/img/01-bitmoji-neutral.png&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bitmoji-divider__bitmoji&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&quot;gu&quot;&gt;### Beyond the Coding&lt;/span&gt;
When I'm not hunched in front of my computer coding (though that is most of my life these days), I like to read, practice yoga...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;liquid-templating&quot;&gt;Liquid Templating&lt;/h4&gt;
&lt;p&gt;Templating was done with the Liquid, as it’s the default templating language for Jekyll. I used Liquid for some custom variables like various links and metadata, but not extensively. If I make the site into a theme for others to use (which I think would be a fun and quite funny project), then I’d make heavier use of it to render certain content more dynamically.&lt;/p&gt;

&lt;h3 id=&quot;styling---css--sass&quot;&gt;Styling - CSS &amp;amp; SASS&lt;/h3&gt;
&lt;p&gt;There is a lot of custom styling on the site. Because the base Jekyll theme for the site, &lt;a href=&quot;https://github.com/jekyll/minima&quot;&gt;minima&lt;/a&gt;, is so minimalistic, I had to do a lot of custom styling.&lt;/p&gt;

&lt;p&gt;For instance, on the homepage, the &lt;a href=&quot;https://ben.perlmutter.io/#projects&quot;&gt;Projects&lt;/a&gt; and &lt;a href=&quot;https://ben.perlmutter.io/#technologies&quot;&gt;Technologies&lt;/a&gt; sections were completely built from scratch. The &lt;a href=&quot;https://ben.perlmutter.io/projects&quot;&gt;Projects page&lt;/a&gt; was also fully custom styling.&lt;/p&gt;

&lt;p&gt;Most of the styling was done with plain CSS, with a but of additional code in SASS to provide some handy features like theming. I also adhered to BEM guidelines to keep all the styling organized.&lt;/p&gt;

&lt;p&gt;The design is fully responsive, making extensive use of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flexbox&lt;/code&gt; to reduce the necessity of media queries. As of writing there are actually only approximately 30 lines of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@media&lt;/code&gt; queries for over 400 lines of custom CSS!&lt;/p&gt;

&lt;h3 id=&quot;vanilla-js&quot;&gt;Vanilla JS&lt;/h3&gt;
&lt;p&gt;ben.perlmutter.io only utilized Vanilla JS with 0 3rd-party libraries or frameworks. This was a somewhat philosophical decision, even if a library like JQuery could have made some things a bit easier. I wanted to make the site with only plain ol’ Javascript to prove to myself (in addition to potential employers) that I am capable of using the language on its own to achieve interesting and properly-working functionality.&lt;/p&gt;

&lt;p&gt;A good chunk of the site’s JS is devoted to the Bitmoji interactivity that you find scattered around the site. The most interesting Bitmoji functionality to make was the random Bitmoji generator that populates a new (and strange) Bitmoji on the header of secondary pages on load and when the user clicks on the Bitmoji. After significant iteration, I got the function down to just a couple of lines:&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// /assets/js/random-bitmoji.js&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;randomBitmoji&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;randomBitmojiNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;randomBitmojiNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;randomBitmojiNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;randomBitmojiNumber&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;randomBitmojiNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;filePath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`/assets/img/random-bitmoji/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;randomBitmojiNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.png`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.h1-bitmoji&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)){&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.h1-bitmoji&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;filePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Most of the rest of the site’s Javascript deals with interactivity on the homepage and the projects page, where there are various click and hover events. None of them were particularly technically interesting or complicated to be quite honest. Some new content displays when you click in one place. Content goes away when you click somewhere else. That type of thing. Writing out all this stuff in Vanilla JS deepened my appreciation of the frontend frameworks and libraries that make managing this kind of functionality so much easier.&lt;/p&gt;

&lt;h3 id=&quot;seo&quot;&gt;SEO&lt;/h3&gt;
&lt;p&gt;A quick google search for ‘ben perlmutter’ will reveal I don’t have the best SEO on my name. (Although it should be noted that I’m probably like 3rd place, which isn’t too bad considering that the 2 higher ranking ones have quite a few years on me and there are like 15 people in the US with the name, but I digress…) For professional purposes, and a bit of ego, I wanted my site to rank more highly on the name.&lt;/p&gt;

&lt;p&gt;To do this, I did a bit of a deep dive into technical SEO. I added various resources to help Google’s spiders crawl my site, like the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;robots.txt&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sitemap.xml&lt;/code&gt; files. I also added the website to the Google search console and added a bunch of metadata to the site’s head to be in line with best practices.&lt;/p&gt;

&lt;p&gt;Achieving good domain authority and the associated SEO rankings is not an overnight process, and one of the most ongoing aspects of the development of ben.perlmutter.io.&lt;/p&gt;

&lt;p&gt;I have a couple of things that I want to do to improve the website SEO:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;I want to start cross-listing blog posts on Medium and add &lt;a href=&quot;https://moz.com/learn/seo/canonicalization&quot;&gt;canonical links&lt;/a&gt; to reference back to the original to increase article exposure and therefore site ranking on Google.&lt;/li&gt;
  &lt;li&gt;I think it’d be interesting to explore how to add SEO-relevant HTML tags to the individual blog posts on the site using Jekyll’s built-in front matter (basically in-document configuration) to optimize the posts’ metadata.&lt;/li&gt;
  &lt;li&gt;Certain other more server-side fixes, like serving certain optimized images for different devices would be a nice addition, but hard to the point of impossibility given the limits of the Jekyll platform. The only feasible path to cross-device image optimization (that I’m aware of) would be to use a remote hosting service for the images like an AWS S3 container, and use other AWS services for optimization. This is something that I would like to look into in the not-too-distant future, as I have recently been diving into the power and capabilities of serverless technologies like AWS.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusion--next-steps&quot;&gt;Conclusion &amp;amp; Next Steps&lt;/h2&gt;
&lt;p&gt;As of writing, I’m pretty happy with the overall ascetic, content, and functionally of ben.perlmutter.io. I believe it has achieved it’s primary &lt;em&gt;raison d’etre&lt;/em&gt;—presenting me as a competent and creative software developer. Hopefully potential employers agree with this assessment 😉.&lt;/p&gt;

&lt;p&gt;But like with every software project, there is more that could be done. A couple of items that I’d like to continue improving for the site are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Improving site-wide SEO (discussed more above)&lt;/li&gt;
  &lt;li&gt;Improving the UX for the project demo GIFs on the projects page. I’d like to explore:
    &lt;ul&gt;
      &lt;li&gt;Adding a loading indicator (ideally involving Bitmoji)&lt;/li&gt;
      &lt;li&gt;Pre-cache the GIFs so that they are already loaded when user clicks on them for quick open.&lt;/li&gt;
      &lt;li&gt;Lengthen cache time for GIFs so repeat visitors can view them quickly.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Create a section on the homepage about my soft skills with a Bitmoji for each of them.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you’d like to view more about my planned next steps, you can checkout the &lt;a href=&quot;https://github.com/bpmutter/ben.perlmutter.io/blob/master/_todo/project-todo.md&quot;&gt;project todo list&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks for reading! ✌🏼&lt;/p&gt;</content><author><name>Ben Perlmutter</name></author><summary type="html">My personal website - April 2020 — ongoing This website, ben.perlmutter.io, is a Jekyll site deployed onto Github Pages. It features information about me, the projects I’m working on, and my blog. The primary goal for this website, like any personal page, is to show off myself and my programming abilities. The website is a constant work in progress, and serves as something of a mad laboratory for technologies and design ideas that I’m trying out.</summary></entry><entry><title type="html">My Technology Wishlist</title><link href="http://localhost:4000/2020/06/19/technology-wishlist.html" rel="alternate" type="text/html" title="My Technology Wishlist" /><published>2020-06-19T00:00:00-05:00</published><updated>2020-06-19T00:00:00-05:00</updated><id>http://localhost:4000/2020/06/19/technology-wishlist</id><content type="html" xml:base="http://localhost:4000/2020/06/19/technology-wishlist.html">&lt;p&gt;My single favorite thing about software development is the constant learning. And unlike many domains, most all of that learning is applied. (something I talk more about &lt;a href=&quot;/blog/personal/2020/04/25/Why-I'm-Becoming-a-Developer.html#infinite-learning-opportunity&quot;&gt;here&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;For instance, if I read some book about the evolution of the American political economy, I can sound nice at a cocktail party, which is cool, I guess. (Though I don’t know if I’ve actually ever been to a cocktail party…) But the utility of that knowledge basically stops there. Now that’s not me knocking learning for the sake of learning, and I will read that book about the American political economy.&lt;/p&gt;

&lt;p&gt;But what makes software development such a rewarding &lt;em&gt;vocation&lt;/em&gt; for me is that this is rarely the case. When you learn a new skill, you can put it to use. And, not only that, someone might pay you a bunch of money to do it!&lt;/p&gt;

&lt;p&gt;So, without further ado or rambling preamble, here are a couple of the top technologies I want to learn and why I’d like to learn them. I’ll try to update the list periodically reflecting new stuff I want to learn, and removing stuff that I have in fact learned.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;ruby-on-rails&quot;&gt;Ruby on Rails&lt;/h3&gt;
&lt;p&gt;I like to build stuff. Programming is a creative outlet for me. From everything that I’ve read and many conversations I’ve had with other developers, Ruby on Rails is one of the best, if not the single best, framework for rapidly building a production-ready web application.&lt;/p&gt;

&lt;p&gt;I don’t think I’ve met a single Rails developer who doesn’t love the framework.&lt;/p&gt;

&lt;p&gt;Also, most of my backend experience to date has been with more minimalistic frameworks like Express and Flask, so I think it would be a fun experience to get to know a more robust and opinionated framework like Rails to round out my knowledge of the backend ecosystem.&lt;/p&gt;

&lt;h3 id=&quot;web-scraping&quot;&gt;Web Scraping&lt;/h3&gt;
&lt;p&gt;I love me some good data. Thanks to the proliferation of public APIs, most of which are free, you can get good data for most any project you’re working on. But you can’t get data on everything you want.&lt;/p&gt;

&lt;p&gt;With scraping the whole internet is your dataset. The promise of that true data empowerment—and freedom—really appeals to me. The scope of things that you can do extends profoundly when you’re not limited to the data provided to you by others.&lt;/p&gt;

&lt;p&gt;At the moment I don’t have any particular scraping projects that I want to work on, but as when you learn any tool, its applications becomes much more apparent after you learn how to use it!&lt;/p&gt;

&lt;h3 id=&quot;basic-data-science--analytics&quot;&gt;Basic Data Science &amp;amp; Analytics&lt;/h3&gt;
&lt;p&gt;Back in my pre-programming days, I got a Bachelors’ in Mathematics and Political Science. Based on my studies, I learned a lot of fairly advanced statistics and was quite competent with the R programming language.  But also based on these studies, I learned that I would not be happy living a life solely devoted to stats and data analysis. After I took off my graduation gown, I pretty much completely dropped the stats.&lt;/p&gt;

&lt;p&gt;While I am still very much confident that I don’t want data analysis to be my main professional focus, I would like to combine all that previous knowledge with my newer coding ability. I would like to learn some basic data analysis, particularly related to the web, and how site data can be utilized to improve performance and growth.&lt;/p&gt;

&lt;p&gt;As of writing, I don’t have a particular data science framework or area of focus that I want to dive into, but it is something that is very much on my roadmap.&lt;/p&gt;

&lt;h3 id=&quot;vuejs&quot;&gt;Vue.js&lt;/h3&gt;
&lt;p&gt;I don’t have a particular reason that I want to learn Vue.js besides that fact that I’ve heard lots of nice things about it from fellow developers and on the internet.&lt;/p&gt;

&lt;p&gt;Vue is also super well-documented, which I really value. Decent documentation can save hours of picking around Stack Overflow, Github, and YouTube rabbit holes.&lt;/p&gt;

&lt;p&gt;To date, I’m quite satisfied with React as a frontend framework, but there’s always value in seeing what else is out there and having a point of comparison.&lt;/p&gt;</content><author><name>Ben Perlmutter</name></author><summary type="html">My single favorite thing about software development is the constant learning. And unlike many domains, most all of that learning is applied. (something I talk more about here) For instance, if I read some book about the evolution of the American political economy, I can sound nice at a cocktail party, which is cool, I guess. (Though I don’t know if I’ve actually ever been to a cocktail party…) But the utility of that knowledge basically stops there. Now that’s not me knocking learning for the sake of learning, and I will read that book about the American political economy. But what makes software development such a rewarding vocation for me is that this is rarely the case. When you learn a new skill, you can put it to use. And, not only that, someone might pay you a bunch of money to do it! So, without further ado or rambling preamble, here are a couple of the top technologies I want to learn and why I’d like to learn them. I’ll try to update the list periodically reflecting new stuff I want to learn, and removing stuff that I have in fact learned.</summary></entry><entry><title type="html">RappaMappa: Full-Stack MERN App</title><link href="http://localhost:4000/projects/2020/06/14/RappaMappa-Fullstack-MERN.html" rel="alternate" type="text/html" title="RappaMappa: Full-Stack MERN App" /><published>2020-06-14T00:00:00-05:00</published><updated>2020-06-14T00:00:00-05:00</updated><id>http://localhost:4000/projects/2020/06/14/RappaMappa-Fullstack-MERN</id><content type="html" xml:base="http://localhost:4000/projects/2020/06/14/RappaMappa-Fullstack-MERN.html">&lt;p&gt;RappaMappa is a fullstack &lt;a href=&quot;https://www.geeksforgeeks.org/mern-stack/&quot;&gt;MERN&lt;/a&gt; app that lets the user explore where rappers have come from and access information about the artist.&lt;/p&gt;

&lt;p&gt;Users can visually explore the map, which features 581 artists, and search for artists with the integrated search box.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#rappamappa-at-a-glance&quot;&gt;RappaMappa at a Glance&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#application-architecture&quot;&gt;Application Architecture &amp;amp; Technologies Used&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#frontend-overview&quot;&gt;Frontend Overview&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#backend-overview&quot;&gt;Backend Overview&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion-and-next-steps&quot;&gt;Conclusion &amp;amp; Next Steps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/rappa-mappa-demo-1.gif&quot; alt=&quot;RappaMappa at a glance&quot; /&gt;&lt;/p&gt;
&lt;h5 id=&quot;rappamappa-at-a-glance&quot;&gt;RappaMappa at a glance&lt;/h5&gt;

&lt;p&gt;RappaMappa is also integrated with the &lt;a href=&quot;https://developer.spotify.com/documentation/web-api/&quot;&gt;Spotify Web API&lt;/a&gt;. When users click on the ‘Music and More’ button for each rapper, it renders additional information about the artist from Spotify, including a link to listen to the artist’s music on the Spotify web player.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/rappa-mappa-demo-2.gif&quot; alt=&quot;RappaMappa artist search with more info&quot; /&gt;&lt;/p&gt;
&lt;h5 id=&quot;rappamappa-artist-search-with-more-info&quot;&gt;RappaMappa artist search with more info&lt;/h5&gt;

&lt;h2 id=&quot;application-architecture&quot;&gt;Application Architecture&lt;/h2&gt;
&lt;p&gt;As noted above, RappaMappa is a fullstack MERN application. The majority of the application logic occurs within front end’s &lt;a href=&quot;https://redux.js.org/&quot;&gt;Redux&lt;/a&gt; store and its interactions with the &lt;a href=&quot;https://developers.google.com/maps/documentation/javascript/tutorial&quot;&gt;Google Maps Javascript API&lt;/a&gt; via the &lt;a href=&quot;https://www.npmjs.com/package/react-google-maps&quot;&gt;react-google-maps&lt;/a&gt; library. RappaMappa uses the &lt;a href=&quot;https://material-ui.com/&quot;&gt;Material UI framework&lt;/a&gt; for styling components.&lt;/p&gt;

&lt;p&gt;The backend serves the frontend, responds to frontend requests, acts as an intermediary to serve Spotify data to the frontend, and fetches data from the MongoDB database.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/rappa-mappa-architecture.png&quot; alt=&quot;RappaMappa application architecture&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;frontend-overview&quot;&gt;Frontend Overview&lt;/h2&gt;
&lt;p&gt;RappaMappa is very frontend heavy application. It makes extensive use of 3rd-party APIs and resources to create a dynamic and data-rich experience. Below are the frontend technologies that make this application possible.&lt;/p&gt;

&lt;h3 id=&quot;frontend-technologies-used&quot;&gt;Frontend Technologies Used:&lt;/h3&gt;
&lt;h4 id=&quot;react&quot;&gt;React&lt;/h4&gt;
&lt;p&gt;At its core, RappaMappa is a React application. It uses very little of the core React library besides passing a few props, but makes extensive use of the technologies and libraries of the React ecosystem. Without the robust and well-documented React ecosystem, creating RappaMappa would have been a substantially more challenging enterprise.&lt;/p&gt;

&lt;h4 id=&quot;redux&quot;&gt;Redux&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://redux.js.org/&quot;&gt;Redux&lt;/a&gt; and the &lt;a href=&quot;https://react-redux.js.org/&quot;&gt;react-redux&lt;/a&gt; library were used to manage application state and make fetch requests to the server for data.&lt;/p&gt;

&lt;p&gt;All artist information is fetched on page load and kept in the Redux store. While this expensive operation lengthens the initial load time, it also allows for a snappy experience after that load.&lt;/p&gt;

&lt;p&gt;Redux also stores and sets information about the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;activeRapper&lt;/code&gt;, whichever artist has been selected by the user. By managing this state in Redux, it provides easy access to the information across components without prop threading. This was particularly important because there were so many components in the application, largely due to all the artist pins being individual components, that if too many components were re-rendering constantly because of state change it would cause significant performance issues or crash the application completely. Redux provided a relatively simple way to manage this point of complexity.&lt;/p&gt;

&lt;p&gt;Redux also allows for a lot of extendibility if new features are to be implemented (additional feature wish-list discussed in &lt;a href=&quot;#conclusion-and-next-steps&quot;&gt;conclusion&lt;/a&gt;).&lt;/p&gt;

&lt;h4 id=&quot;material-ui&quot;&gt;Material UI&lt;/h4&gt;
&lt;p&gt;RappaMappa uses the &lt;a href=&quot;https://material-ui.com/&quot;&gt;Material UI&lt;/a&gt; framework. Material provides a great library of elegant, responsive components, and tools for refactoring them to the application’s need. There is also extensive documentation of Material, which helped resolve the issues that came up during the development process.&lt;/p&gt;

&lt;p&gt;Material is also great for mobilize optimizing custom components with its &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;makeStyles&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useMediaQuery&lt;/code&gt; hooks. These hooks were particularly useful for making the navbar and popup box responsive to varying device widths.&lt;/p&gt;

&lt;p&gt;One Material component that was particularly important for the project was &lt;a href=&quot;https://material-ui.com/components/autocomplete/&quot;&gt;Autocomplete&lt;/a&gt;. It was used in the search box to dynamically display artist recommendations based on user input. The Autocomplete component allowed for a rich search experience with minimal technical overhead.&lt;/p&gt;

&lt;h5 id=&quot;search-implementation-with-autocomplete-component&quot;&gt;Search implementation with Autocomplete component&lt;/h5&gt;
&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SearchBox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;classes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useStyles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useLocation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//gets browser location to only render search box on map&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rapperNames&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rappers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rappers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;rapperNames&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rappers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handleSearch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;preventDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementsByName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;search-query&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isValidSearch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isValidSearch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;invalidSearch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rappers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rappers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pathname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;classes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onSubmit=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleSearch&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
                &amp;lt;Autocomplete
                  id=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;combo-box&quot;&lt;/span&gt;
                  &lt;span class=&quot;na&quot;&gt;options=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rapperNames&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;
                  &lt;span class=&quot;c1&quot;&gt;// freeSolo=&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
                  &lt;span class=&quot;na&quot;&gt;autoComplete=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;
                  &lt;span class=&quot;na&quot;&gt;noOptionsText=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Please select one of the listed artists&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;
                  &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
                  renderInput=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TextField&lt;/span&gt;
                      &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
                      &lt;span class=&quot;na&quot;&gt;label=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Search artists&quot;&lt;/span&gt;
                      &lt;span class=&quot;na&quot;&gt;variant=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;standard&quot;&lt;/span&gt;
                      &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;search-query&quot;&lt;/span&gt;
                      &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
                      InputProps=
                    /&amp;gt;
                  )&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;IconButton&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;className=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;classes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;searchIconButton&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;onClick=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleSearch&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SearchIcon&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; /&amp;gt;
            &amp;lt;/IconButton&amp;gt;
          &amp;lt;/&amp;gt;
        ) : null&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;google-maps-javascript-api&quot;&gt;Google Maps Javascript API&lt;/h4&gt;
&lt;p&gt;The &lt;a href=&quot;https://developers.google.com/maps/documentation/javascript/tutorial&quot;&gt;Google Maps Javascript API&lt;/a&gt; is absolutely essential to this project. Basically the entire frontend is built on top of the Google Maps API via the &lt;a href=&quot;https://tomchentw.github.io/react-google-maps/&quot;&gt;react-google-maps&lt;/a&gt; library. All artist information is rendered on a Google Map component as pins, and then displayed in custom stylized Infobox components.&lt;/p&gt;

&lt;p&gt;The API has a truly robust feature set, of which this application just scratched the surface. However, with its scope also lie many bugs and other issues. Of particular pain throughout the development, were the Pins and Infobox components. For instance, to render the artist information on mobile devices, it required forgoing the Infobox component associated with the Pin of the large-screen version in favor of a different component positioned to the bottom of the screen. This change was necessary because the Infobox component has to have static position, while the mobile styling required positioning relative to the device window for easy use on smaller screen size.&lt;/p&gt;

&lt;h4 id=&quot;fusejs&quot;&gt;Fuse.js&lt;/h4&gt;
&lt;p&gt;To enable fuzzy searches (where match isn’t exact), RappaMappa uses the &lt;a href=&quot;https://fusejs.io/&quot;&gt;Fuse.js&lt;/a&gt; search library to load the closest result to the query if there is a reasonably close result. If nothing remotely similar to the query exists in the RappaMappa database, the application presents the user with a message saying there were no results.&lt;/p&gt;

&lt;h2 id=&quot;backend-overview&quot;&gt;Backend Overview&lt;/h2&gt;
&lt;p&gt;RappaMappa uses an Express server with MongoDB as the database. Compared to the frontend, the backend of RappaMappa is fairly simple, with the server sending the front end to the client, receiving requests, and sending data to the frontend. Below are the backend technologies used with some notes regarding their implementation.&lt;/p&gt;

&lt;h3 id=&quot;backend-technologies-used&quot;&gt;Backend Technologies Used&lt;/h3&gt;
&lt;h4 id=&quot;expressjs&quot;&gt;ExpressJS&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://expressjs.com/&quot;&gt;Express&lt;/a&gt; was the natural choice for RappaMappa’s server-side framework. The minimalism of Express lent itself to the very light-weight responsibilities of RappaMappa’s server. The server is just a couple of routes and a connection to the database, with a few utilities to facilitate this.&lt;/p&gt;

&lt;h4 id=&quot;mongodb&quot;&gt;MongoDB&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://www.mongodb.com/&quot;&gt;MongoDB&lt;/a&gt; was perfect for this project because its collections of JSON-like records made it very easy to store the artist information, which is in JSON object form. The &lt;a href=&quot;https://mongoosejs.com/&quot;&gt;Mongoose ORM&lt;/a&gt; was used to communicate between the database, hosted in &lt;a href=&quot;https://www.mongodb.com/cloud/atlas&quot;&gt;MongoDB Atlas&lt;/a&gt;, and the server.&lt;/p&gt;

&lt;h4 id=&quot;spotify-web-api&quot;&gt;Spotify Web API&lt;/h4&gt;
&lt;p&gt;In addition to the information stored in the database, the backend also fetches additional artist data in a JSON object from the &lt;a href=&quot;https://developer.spotify.com/documentation/web-api/&quot;&gt;Spotify Web API&lt;/a&gt;. This information includes: artist image, artist popularity, subgenres, and an external link to listen to the artists on Spotify.&lt;/p&gt;

&lt;p&gt;While the Spotify Web API is a fairly standard RESTful API, it requires authentication with a token that expires after an hour. To facilitate this, the Express server fetches a new token every hour, which is used in all requests to the Spotify server.&lt;/p&gt;

&lt;h5 id=&quot;code-for-spotify-auth-flow&quot;&gt;Code for Spotify auth flow&lt;/h5&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// in /utils.js&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getSpotifyAccessToken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;accountCredential&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;spotifyClientId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;spotifyClientSecret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;buff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;accountCredential&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b64encodedAccountInfo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;base64&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;https://accounts.spotify.com/api/token&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Content-Type&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;application/x-www-form-urlencoded&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;Authorization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`Basic &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b64encodedAccountInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;qs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;grant_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;client_credentials&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//full token object&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// in /server.js&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;spotifyAccessToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;spotifyAccessTokenVal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;spotifyAccessToken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getSpotifyAccessToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;spotifyAccessTokenVal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;spotifyAccessToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;access_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;setInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;spotifyAccessToken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getSpotifyAccessToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;spotifyAccessTokenVal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;spotifyAccessToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;access_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3500000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;rap-world-dataset&quot;&gt;Rap World Dataset&lt;/h4&gt;
&lt;p&gt;The artist information in the database was gathered from the &lt;a href=&quot;https://public.opendatasoft.com/explore/dataset/rapworld/api/&quot;&gt;Rap World dataset&lt;/a&gt;. It’s a well-curated dataset with consistent information about rappers and where they’re from. Without this dataset, collecting the information that makes this project possible would have been much more complicated—likely involving some web scraping and *shudder* manual data entry.&lt;/p&gt;

&lt;p&gt;It is worth noting that the Rap World data was generated as part of a somewhat similar project, &lt;a href=&quot;https://rapworldmap.com/&quot;&gt;Rap World Map&lt;/a&gt;. However, the Rap World Map site was actually down for the entire development of this project (June 2020), so the website was never used as a reference for the final product here. Any similarities beyond the fact that both projects use the same dataset are purely coincidental.&lt;/p&gt;

&lt;h2 id=&quot;conclusion-and-next-steps&quot;&gt;Conclusion and Next Steps&lt;/h2&gt;
&lt;p&gt;Time to break the 4th wall. RappaMappa was a ton of fun to build. I’m a lifelong fan of hip-hop, so it was an amazing experience getting to combine that passion with my newer passion for coding.&lt;/p&gt;

&lt;p&gt;This also marks the first time that I’ve built a fullstack app solo, and my first project of significant scope where I originated the idea and brought it into existence. RappaMappa has been an incredibly rewarding to create.&lt;/p&gt;

&lt;p&gt;While making RappaMappa, I got to play with a whole bunch of new technologies and get better at even more. At the beginning of the project, I’d only learned React 2 weeks previous, and Redux 1 week before. I’ve come out of it stronger with both, and eager to continue getting better with React and creating cool stuff with the many amazing libraries and technologies of the React ecosystem.&lt;/p&gt;

&lt;p&gt;This was also my first time using MongoDB (I’ve previously worked with Postgres). I found it and the full MERN stack very smooth and well integrated, and now understand why it’s so popular. I look forward to learning more about MongoDB and build projects  that have more robust backends than RappaMappa using it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Next Steps:&lt;/strong&gt; Next steps for RappaMappa may be found in the &lt;a href=&quot;https://github.com/bpmutter/RappaMappa/blob/master/project-todos.md&quot;&gt;project todo list&lt;/a&gt;, where you can also find a somewhat exhaustive list of the tasks of the project development. If you’d like to participate in the further development of RappaMappa, &lt;a href=&quot;https://twitter.com/bpmutter&quot;&gt;reach out to me (Ben Perlmutter) on Twitter&lt;/a&gt;. And if you want to support this project financially, please make a contribution to &lt;a href=&quot;https://secure.actblue.com/donate/ms_blm_homepage_2019&quot;&gt;Black Lives Matter&lt;/a&gt; instead.&lt;/p&gt;

&lt;p&gt;Thanks for reading! ✌🏽&lt;/p&gt;</content><author><name>Ben Perlmutter</name></author><summary type="html">RappaMappa is a fullstack MERN app that lets the user explore where rappers have come from and access information about the artist. Users can visually explore the map, which features 581 artists, and search for artists with the integrated search box.</summary></entry><entry><title type="html">Tappdin: My First Full-Stack App</title><link href="http://localhost:4000/projects/2020/05/24/tappdin-my-first-full-stack.html" rel="alternate" type="text/html" title="Tappdin: My First Full-Stack App" /><published>2020-05-24T00:00:00-05:00</published><updated>2020-05-24T00:00:00-05:00</updated><id>http://localhost:4000/projects/2020/05/24/tappdin-my-first-full-stack</id><content type="html" xml:base="http://localhost:4000/projects/2020/05/24/tappdin-my-first-full-stack.html">&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: The following document is an adapted from the project’s Github README. The project was made in collaboration with &lt;a href=&quot;https://github.com/JBui923&quot;&gt;Johnny Bui&lt;/a&gt; (front-end lead) and &lt;a href=&quot;https://github.com/giancarlo-sanchez&quot;&gt;Giancarlo Sanchez&lt;/a&gt; (backend lead), and myself (project manager). The code for the project represents a collaborative effort of us three.&lt;/p&gt;

&lt;!-- One of my responsibilities was creating the README file for the project, and my first foray into writing about my code for a public. It was more fun and less painful than I though it'd be.  --&gt;

&lt;!-- Below is an overview of the project, lightly adapted from the Github project README.  --&gt;

&lt;h2 id=&quot;tappdin-at-a-glance&quot;&gt;Tappdin At a Glance&lt;/h2&gt;
&lt;p&gt;Tappdin is a beer tracking app modeled on &lt;a href=&quot;https://untappd.com/&quot;&gt;Untappd&lt;/a&gt;. It allows users to create accounts, post and delete checkins of beers, view the checkins of other users, and discover new beers.&lt;/p&gt;

&lt;p&gt;Tappdin currently possesses a database of 500 beers from almost 20 breweries that users can explore and review, which we call &lt;strong&gt;checkins&lt;/strong&gt; to maintain consistency with the original Untappd app.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;The code and live demo may be found here:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://tappdin.herokuapp.com/&quot;&gt;Live version&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bpmutter/tappdin&quot;&gt;Frontend Github repo (with README)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bpmutter/tappdin-backend&quot;&gt;Backend Github repo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;application-architecture-and-technologies-used&quot;&gt;Application Architecture and Technologies Used&lt;/h2&gt;
&lt;p&gt;Tappdin was built using separate front and back end servers that communicate via RESTful APIs.&lt;/p&gt;

&lt;p&gt;Both front and backend servers are built using the Express NodeJS framework. We used a PostgreSQL (postgres) database to store all application data.&lt;/p&gt;

&lt;p&gt;The front end uses the &lt;a href=&quot;https://pugjs.org/api/getting-started.html&quot;&gt;Pug&lt;/a&gt; templating engine to render views from the frontend server. We used vanilla Javascript for interactivity and standard CSS  for styling.&lt;/p&gt;

&lt;p&gt;The backend uses a suite of libraries for application security and building its API routes (discussed further in the backend section below). To connect our backend to the  postgres database we implemented the &lt;a href=&quot;https://sequelize.org/&quot;&gt;Sequelize ORM&lt;/a&gt;.  We also seeded the database using beer and brewery information from &lt;a href=&quot;https://brewerydb.com/developers/&quot;&gt;BreweryDB API&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;frontend-overview&quot;&gt;Frontend Overview&lt;/h2&gt;
&lt;p&gt;As Tappdin, is a quite straightforward CRUD app with simple interactivity, we were able to build out the front end without any AJAX and minimal client-side Javascript.&lt;/p&gt;

&lt;p&gt;We made extensive use of the &lt;strong&gt;Pug templating engine&lt;/strong&gt; to render dynamic content and create reusable HTML components that we were able to deploy across multiple views on the site.&lt;/p&gt;

&lt;h3 id=&quot;dynamic-templating-with-pug&quot;&gt;Dynamic Templating with Pug&lt;/h3&gt;
&lt;p&gt;For instance, we created a Pug mixin (the Pug equivalent of a JS function) to create relevant checkins across different views. We paired this with a component that took an array of checkin objects to dynamically render the associated  checkins in its context (checkins by user on homepage, checkins about brewery on brewery page, etc.)&lt;/p&gt;

&lt;p&gt;Pug code snippet of checkins mixin:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-pug&quot;&gt;mixin checkin(checkin)
    .checkin
        head    
            link(rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/styles/checkin.css&quot;)
        img.checkin__profile-picture(src=checkin.User.photo)
        .checkin__main
            p #[a(href=`/users/${checkin.User.id}`) #{checkin.User.firstName} #{checkin.User.lastName}] drank #[a(href=`/beers/${checkin.Beer.id}`) #{checkin.Beer.name}] from #[a(href=`/breweries/${checkin.Beer.Brewery.id}`) #{checkin.Beer.Brewery.name}]
            .checkin__rating
                p Rating: 
                    span.checkin__rating-val=checkin.displayRating
                        //-created from the script
            if checkin.comment
                p=checkin.comment
            else 
                p No comment
            div.checkin__other-info
                span.checkin__date=checkin.createdAt
                if checkin.isSessionUser 
                    span.checkin__delete #[a(href=`/checkins/${checkin.id}/delete`) Delete checkin]
        img.checkin__profile-picture(src=checkin.Beer.Brewery.image)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pug code snippet of dynamically rendering all the checkins for a particular view:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-pug&quot;&gt;section.recent-activity
    include checkin
    head
        link(rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/styles/recent-activity.css&quot;)
    h2 Recent Activity
    div#checkin__container
        if checkins.length
            each checkin in checkins
                +checkin(checkin)
        else
            p It looks like there aren't any reviews yet
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/checkin-example.png&quot; alt=&quot;Example beer checkin&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;refactoring-the-way-to-reusable-code&quot;&gt;Refactoring the Way to Reusable Code&lt;/h3&gt;
&lt;p&gt;The most challenging aspect of the front end of Tappdin was probably the sheer number of different views that we had to create, and how to serve content dynamically into them.&lt;/p&gt;

&lt;p&gt;This required us to get creative in how we created that content, using Pug mixins, various layouts, and a whole lot of CSS code. We also had to figure out how to send the relevant data to the views form the server to make code reusable across different views.&lt;/p&gt;

&lt;p&gt;There was no secret sauce that we used to make the code module and reusable. Our general process was:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;hard coding how we wanted something to look with Pug, CSS, and dummy data provided inline.&lt;/li&gt;
  &lt;li&gt;Then we would refactor to add dynamic data from the server&lt;/li&gt;
  &lt;li&gt;Finally, we’d modularize the component to reuse accross other parts of the site.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;backend-overview&quot;&gt;Backend Overview&lt;/h2&gt;
&lt;p&gt;Our backend was primarily a collection of RESTful APIs that we used to query our database for relevant data on beer, breweries, and app users.&lt;/p&gt;

&lt;p&gt;We made extensive use of the Sequelize ORM to make fairly complex queries of data associated across multiple tables. Once we had the database built and setup in the ORM, these queries were fairly straightforward, if somewhat challenging to execute due to the sometimes obtuse Sequelize syntax.&lt;/p&gt;

&lt;h3 id=&quot;authentication-and-application-security&quot;&gt;Authentication and Application Security&lt;/h3&gt;
&lt;p&gt;We used a JSON Web Token (JWT) to authorize our users across sessions. We stored the JWT in a cookie in the browser, which we would send along for verification with backend server requests. We used the &lt;a href=&quot;https://www.npmjs.com/package/jsonwebtoken&quot;&gt;jsonwebtoken&lt;/a&gt; node library for this.&lt;/p&gt;

&lt;p&gt;We also used the &lt;a href=&quot;https://www.npmjs.com/package/csurf&quot;&gt;csurf&lt;/a&gt; package on our frontend server to protect against CSURF attacks and the &lt;a href=&quot;https://www.npmjs.com/package/bcrypt&quot;&gt;bcryot&lt;/a&gt; hashing library to protect user passwords.&lt;/p&gt;
&lt;h3 id=&quot;relational-database-model&quot;&gt;Relational Database Model&lt;/h3&gt;
&lt;p&gt;One of the larger challenges of the project was to design a relational database schema to associate our data. Before we wrote a single line of code, we designed the database with all the tables we’d need and their relationships to each other.&lt;/p&gt;

&lt;p&gt;We then had to translate that to 0ur Sequelize models where we we created associations between the tables so that we easily query across them (basically the Sequelize version of standard postgres INNER JOIN).&lt;/p&gt;

&lt;p&gt;This was the final database schema: 
&lt;img src=&quot;/assets/img/database-schema.png&quot; alt=&quot;Tappdin database schema&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Notes on the database schema&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Foreign keys are denoted by FK&lt;/li&gt;
  &lt;li&gt;Yellow boxes represent many-to-many join tables&lt;/li&gt;
  &lt;li&gt;Blue boxes have one-to-many relationships with associated foreign keys&lt;/li&gt;
  &lt;li&gt;As of writing (5/24/20), Tappdin doesn’t yet have implemented the Liked Brewery and beer List functionality. However, these tables are in the database, and the relations are set up in the Sequelize models. We would like to implement this functionality at a later point.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;seeding-the-database&quot;&gt;Seeding the Database&lt;/h3&gt;
&lt;p&gt;Seeding the database was probably the most technically intensive part of the entire project. As noted above, we used the BreweryDB API to seed our database with information about beers and breweries.&lt;/p&gt;

&lt;p&gt;While BreweryDB was a great (and free!) resource for generating seed data, the way that the data was structured in BreweryDB was not compatible with our database design.&lt;/p&gt;

&lt;p&gt;BreweryDB used 6-character strings as the primary keys for their breweries, whereas we had to use integers at primary keys (PKs) due to restrictions in the Sequelize ORM only permitting integer PKs.&lt;/p&gt;

&lt;p&gt;Matters were further complicated by the fact that we needed to seed the breweries for the database before we seeded the beer to allow for the foreign keys (FKs) in the Beers table to be dependent on the Breweries table. However, the relationships within BreweryDB API structure required that we query beers before we could access the dependent breweries.&lt;/p&gt;

&lt;p&gt;We therefore had to:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Create a list of all breweries we were to use in our seed data.&lt;/li&gt;
  &lt;li&gt;Add integer primary keys to each brewery instance&lt;/li&gt;
  &lt;li&gt;Reassociate these brewery primary keys with their associated beers&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To solve this problem, we first did a pass through all 500 beers we were going to use where we created a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set&quot;&gt;Javascript Set&lt;/a&gt; to capture only the unique breweries.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Seed Set Code:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;seed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;./raw-data&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;breweriesSet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;seed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;beer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;beer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;breweries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;beer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;breweries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;breweriesSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;beer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;breweries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We then converted that set into an array, so we could easily create PKs from the position in the array. Our PKs, were just the position+1.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Converting the set into useable array:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;brewerySeed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;seed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;beer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;beer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;breweries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;beer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;breweries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;breweriesSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;has&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;beer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;breweries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;brewerySeed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;beer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;breweries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;beer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;breweries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;beer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;breweries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;locations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;locality&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;beer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;breweries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;locations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;region&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;beer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;breweries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;website&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;beer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;breweries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;website&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;beer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;breweries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;images&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;beer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;breweries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;squareLarge&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;createdAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;updatedAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;breweriesSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;beer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;breweries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Once we had the brewery data in a Sequelize-compatible format, we reassociated it with the beer table, adding the relevant beer as a FK referenced by it’s ID.&lt;/p&gt;

&lt;p&gt;We then removed and/or renamed keys in the beer and brewery JSON objects to be compatible with the database schema.&lt;/p&gt;

&lt;p&gt;Finally, we wrote the data out into JS files, in which we exported the arrays of beer/brewery POJOs to the Sequelize seed file, from where we added it to the database.&lt;/p&gt;

&lt;h2 id=&quot;conclusion--next-steps&quot;&gt;Conclusion &amp;amp; Next Steps&lt;/h2&gt;
&lt;p&gt;This project represented our first full-stack application. It was, to put it modestly, a challenge.  But with that being said, we would also consider it to be a very successful effort—we met our MVP goals and created a full-stack CRUD application that now lives on the internet, and a pretty decent looking one too.&lt;/p&gt;

&lt;p&gt;While the project has been deployed that doesn’t mean we are done with it yet. A couple of features that we haven’t been able to add, but would like to are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Make the whole project responsive&lt;/li&gt;
  &lt;li&gt;Add functionality for Liked Breweries and Lists of beers (already built into database, as noted above, but not yet implemented in app)&lt;/li&gt;
  &lt;li&gt;Refine search functionality&lt;/li&gt;
  &lt;li&gt;Comprehensively review error handling to make sure that we properly handle all&lt;/li&gt;
  &lt;li&gt;Add view and backend API to render all beers associated with a particular brewery&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for reading, cheers! 🍻&lt;/p&gt;</content><author><name>Ben Perlmutter</name></author><summary type="html">NOTE: The following document is an adapted from the project’s Github README. The project was made in collaboration with Johnny Bui (front-end lead) and Giancarlo Sanchez (backend lead), and myself (project manager). The code for the project represents a collaborative effort of us three. Tappdin At a Glance Tappdin is a beer tracking app modeled on Untappd. It allows users to create accounts, post and delete checkins of beers, view the checkins of other users, and discover new beers. Tappdin currently possesses a database of 500 beers from almost 20 breweries that users can explore and review, which we call checkins to maintain consistency with the original Untappd app.</summary></entry><entry><title type="html">If I Were to Do It Again, Part I: Learn the basics without spending a dime</title><link href="http://localhost:4000/blog/do-it-again/2020/04/26/If-I-Were-to-Do-It-Again-part-i.html" rel="alternate" type="text/html" title="If I Were to Do It Again, Part I: Learn the basics without spending a dime" /><published>2020-04-26T13:15:36-05:00</published><updated>2020-04-26T13:15:36-05:00</updated><id>http://localhost:4000/blog/do-it-again/2020/04/26/If-I-Were-to-Do-It-Again-part-i</id><content type="html" xml:base="http://localhost:4000/blog/do-it-again/2020/04/26/If-I-Were-to-Do-It-Again-part-i.html">&lt;p&gt;I am now about 8 months into learning software development, and it’s been 4 months since I started studying full time, and 2 months since I started the App Academy online bootcamp.&lt;/p&gt;

&lt;p&gt;The other day, I was thinking upon my journey so far, what I’ve done right, and what I’d do differently.&lt;/p&gt;

&lt;p&gt;Overall, I’m pretty happy with the choices I’ve made and the direction I’ve gone, but there is always room for improvement. In another article some time soon, I’d like to discuss what those steps have been.&lt;/p&gt;

&lt;p&gt;In this post, I wanted to take a moment to reflect on what, if I were to start from zero, I would do. I hope that this article can serve as guidance to anyone looking to get into the software development field. It can be daunting to start learning programming on your own. What language to start? What courses and resources to use? How much to practice?&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;There is of course no right answer here, but if I were to start learning software development again, here is what I would do.&lt;/p&gt;

&lt;h3 id=&quot;start-slowish-and-be-cheap&quot;&gt;Start Slow(ish) and Be Cheap&lt;/h3&gt;
&lt;p&gt;Before you sign up for some bootcamp and cosign away 15% of your income for the next couple of years or quit your job to lock yourself in your parents’ basement for 6 months teaching yourself to code, you should see if you like it and get a lay of the land.&lt;/p&gt;

&lt;p&gt;Life as a developer isn’t for everyone. Sure, everyone can learn to code, but that doesn’t mean it’s something you want to devote yourself to. Coding is interesting, engaging, and a constant challenge, but it totally has it’s down sides that might mean it’s not for you. You are sitting in front of a computer screen all day, often with no company, and you often get stuck digging into problems that make you want to tear your hair out, just to name a few downsides.&lt;/p&gt;

&lt;p&gt;Before you fully commit to the life of code, learn the basics and make sure it’s the right choice for you. Plus, you’ll have a nice foundation for when/if you decide to dive full in.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I’d estimate that doing everything outlined below will take approximately 2 months if you’re studying 15hrs/week.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;top-ftw&quot;&gt;TOP FTW&lt;/h3&gt;
&lt;p&gt;For anyone looking to learn software development, I highly recommend finishing &lt;strong&gt;&lt;a href=&quot;https://theodinproject.com&quot;&gt;The Odin Project&lt;/a&gt; (TOP) Web Development 101&lt;/strong&gt;. It’s a free online curriculum that aggregates some of the best free resources on the internet, and blends them together into a unified curriculum, with some cool projects thrown in. It’s instructions aren’t super in-depth, but gives you just enough structure and guidance to push you along. Plus, this builds independence and self-teaching, necessary traits for any developer.&lt;/p&gt;

&lt;p&gt;TOP provides a great foundation for further learning, and you get to produce some cool projects like a &lt;a href=&quot;https://bpmutter.github.io/tomato-timer/&quot;&gt;tomato timer&lt;/a&gt; and &lt;a href=&quot;https://bpmutter.github.io/calculator/&quot;&gt;calculator&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I’d estimate finishing TOP Web Dev 101 takes around 80 hours if you want to do it right. I’d devote approx. 10-15 hrs/week for 2 months to it, so you’re getting constant practice, but can still continue with your other commitments in your life as you get a lay of the software development landscape.&lt;/p&gt;

&lt;p&gt;Once you’ve finished TOP Web Dev 101, you can probably get into virtually any bootcamp you’d like and be confident that beginning a career in software development is the right choice for you.&lt;/p&gt;

&lt;h3 id=&quot;trust-in-the-algorithms&quot;&gt;Trust in the Algorithms&lt;/h3&gt;
&lt;p&gt;In addition to the actual programming, start learning about the industry, developer culture, and computer science fundamentals. Use sites like YouTube, Medium, and reddit to wrap yourself in the culture.&lt;/p&gt;

&lt;p&gt;Many of these sites are powered by some really smart algorithms that can find content that you’ll like better than you’d be able to, so once you’ve started liking a few topics and content creators, similar stuff will start magically popping up in your feed, keeping you learning (and generating them advertising $$, but that’s a different subject).&lt;/p&gt;

&lt;h4 id=&quot;youtube&quot;&gt;YouTube!&lt;/h4&gt;
&lt;p&gt;YouTube is your best friend for learning about programming, due to its massive volume of content. Just start searching around for topics of interest, and once you watch a couple of videos the YouTube algorithm will catch on and start putting lots of relevant content in your feed.&lt;/p&gt;

&lt;p&gt;To get yourself going, here are a couple of my favorite YouTube channels for everything programming:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/channel/UC9-y-6csu5WGm29I7JiwpnA&quot;&gt;Computerphile&lt;/a&gt;: Some very high production value, high-quality deep dives into computer science topics. Not necessarily stuff you’ll use day to day, but provides a nice foundation in theory and CS history.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=O5nskjZ_GoI&amp;amp;list=PL8dPuuaLjXtNlUrzyH5r6jN9ulIgZBpdo&amp;amp;index=2&quot;&gt;Crash Course Computer Science&lt;/a&gt;: More high-quality deep dives into computer science, with an emphasis on the history of computers. What’s extra cool about these videos is that they’re a unified curriculum, not a scattershot of topics of the day, like most YouTube channels.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/channel/UCrqAGUPPMOdo0jfQ6grikZw&quot;&gt;Colt Steele&lt;/a&gt; Colt, in addition to having an awesome name, does a really good job explaining complex topics so that they’re easily accessible to beginners.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/channel/UCRLEADhMcb8WUdnQ5_Alk7g&quot;&gt;Code Drip&lt;/a&gt; - Another dude in his bedroom talking about programming and how to get a software development job. Basically a subgenre in and of itself on YouTube. Code Drip is one of my favorites, but there are many more. Search around and you’ll find more.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;A note of caution on YouTube:&lt;/strong&gt; Don’t waste your time on YouTube learn-to-code instructional videos. If it’s in a video, that means that they’re doing the work. You don’t want to just code along with that because it’s totally passive learning. You’ll barely retain anything and won’t get to engage in troubleshooting and looking stuff up—at least 3/4 the battle of programming.&lt;/p&gt;

&lt;h4 id=&quot;dont-forget-to-read-too&quot;&gt;Don’t forget to read too&lt;/h4&gt;
&lt;p&gt;There’s also a ton of great stuff on Medium, reddit and scattered around the web. I don’t have any particular recommendations here. I have read a lot of blog posts and articles about programming, but I would mostly find content just through Googling around topics and clicking on links. If I expand this article into a proper guide, I’ll come back and add some resources here.&lt;/p&gt;

&lt;h3 id=&quot;talk-to-people-doing-the-stuff-you-want-to-do&quot;&gt;Talk to People Doing the Stuff You Want to Do&lt;/h3&gt;
&lt;p&gt;Talk to some real devs! See how they entered the industry, and what their advice to you is. I was lucky enough to have lots of developer friends to talk to, and they gave me tons of invaluable advice and direction.&lt;/p&gt;

&lt;p&gt;If you don’t know any professional developers, you’re not out of luck. There are lots of other ways that you can meet people in the developer community.&lt;/p&gt;

&lt;p&gt;One thing that has always surprised me by how well it has worked for me is reaching out to people on LinkedIn. Find someone who is doing something interesting and send them a flattering message saying how you are impressed by their experience and want to chat w some questions. I’d estimate I get a &amp;gt;50% response rate, doing this and have gotten a ton of great feedback.&lt;/p&gt;

&lt;p&gt;It should be noted that if you’re going down this path, make sure that you have a decently curated profile to leave a good 1st impression and make this stranger that you just sent a message to actually want to respond to you.&lt;/p&gt;

&lt;p&gt;I’ve also heard good things about going to coding meetups. Check Facebook and Meetup for stuff near you. I’ve never actually done this, so can’t speak to it personally. But I have a couple of friends who’ve had positive experiences with Meetups, and it’s consistently mentioned round the web as a helpful tool for getting into your local developer community.&lt;/p&gt;

&lt;h3 id=&quot;part-i-wrap-up&quot;&gt;Part I Wrap Up&lt;/h3&gt;
&lt;p&gt;Alright that was a lot of words, but really it’s just 3 simple steps:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;The Odin Project Web Development 101&lt;/strong&gt; to learn programming fundamentals&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Watch some YouTube videos and read some blog posts&lt;/strong&gt; in your free time to learn more about the industry and computer science&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Get networking&lt;/strong&gt; to meet people in the field.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I’d estimate doing all this will take approximately 15 hrs/week for two months. And once you’re done with this, you’ll have a solid understanding of programming fundamentals, have a couple of decent projects under your belt, and know a lot more about the programming landscape.&lt;/p&gt;

&lt;p&gt;That’s a hell of a lot accomplished in 2 months, but it’s totally doable, and completely free. Not too bad.&lt;/p&gt;

&lt;h4 id=&quot;part-ii-coming-soon&quot;&gt;Part II Coming Soon…&lt;/h4&gt;
&lt;p&gt;In part II of this &lt;strong&gt;If I Were to Do It Again&lt;/strong&gt; series, I’ll talk about why you should do a bootcamp, and how to choose the right one while still continuing to learn programming.&lt;/p&gt;</content><author><name>Ben Perlmutter</name></author><summary type="html">I am now about 8 months into learning software development, and it’s been 4 months since I started studying full time, and 2 months since I started the App Academy online bootcamp. The other day, I was thinking upon my journey so far, what I’ve done right, and what I’d do differently. Overall, I’m pretty happy with the choices I’ve made and the direction I’ve gone, but there is always room for improvement. In another article some time soon, I’d like to discuss what those steps have been. In this post, I wanted to take a moment to reflect on what, if I were to start from zero, I would do. I hope that this article can serve as guidance to anyone looking to get into the software development field. It can be daunting to start learning programming on your own. What language to start? What courses and resources to use? How much to practice?</summary></entry><entry><title type="html">Why I’m Becoming a Software Developer</title><link href="http://localhost:4000/blog/personal/2020/04/25/Why-I'm-Becoming-a-Developer.html" rel="alternate" type="text/html" title="Why I'm Becoming a Software Developer" /><published>2020-04-25T13:15:36-05:00</published><updated>2020-04-25T13:15:36-05:00</updated><id>http://localhost:4000/blog/personal/2020/04/25/Why-I'm-Becoming-a-Developer</id><content type="html" xml:base="http://localhost:4000/blog/personal/2020/04/25/Why-I'm-Becoming-a-Developer.html">&lt;p&gt;I can put an exact date on when I decided I wanted to become a software developer. It was the night before my 25th birthday, November 1, 2019.&lt;/p&gt;

&lt;p&gt;I was in Mexico City on vacation. I’d decided to go to CDMX for my birthday because my birthday, November 2, is also the Day of the Dead and that’s always something I’ve wanted to experience. And probably more importantly, I have a deep aversion to all the attention you get on your birthday. I wanted to not just escape that in a foreign country, but have it be overwhelmed by the attention granted to another holiday.&lt;/p&gt;

&lt;p&gt;Plus, tacos al pastor, tequila, mesoamerican pyramids, mole, and more tacos al pastor. (Side note: I gained at least 5 pounds during my 2 weeks in Mexico.)&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;At the time I was working remotely in a marketing and sales position for a Silicon Valley startup from Medellin, Colombia. I learned a lot in the position, but I had an itching feeling that I wanted to transition to the more technical side of the world of tech.&lt;/p&gt;

&lt;p&gt;Concurrently, I’d started studying a bit of front end development because it was relevant to some projects for the company and a side project e-commerce store I was working on. I liked it. There was a ton to learn, instant gratification when you get something right, and lots of career opportunities when you get good at it.&lt;/p&gt;

&lt;p&gt;I was apprehensive about taking the leap into an entirely new field. It’d basically be starting from zero in a new career, and that wasn’t a decision I wanted to take lightly, especially because I’d just gotten into the world of tech and marketing less than 2 years previously.&lt;/p&gt;

&lt;p&gt;But in a hyper-cliched ¼-life crisis move, on the afternoon before my 25th birthday, I decided that I need to make a career change. I think that it was an inevitability, but the birthday provided the catylist that I needed to take the leap.&lt;/p&gt;

&lt;p&gt;The week I got back from the Mexico, I told my job I was quitting by the end of the year, and I dove deeper into programming. I’d spend the mornings and weekends upping my programming chops with the &lt;a href=&quot;https://www.theodinproject.com/&quot;&gt;Odin Project&lt;/a&gt;, and figuring out how I wanted to proceed with my studying. (I eventually decided that a bootcamp would be the best route for me, but that’s the subject for a different blog post.)&lt;/p&gt;

&lt;p&gt;The more I immerse myself in the world of programming, the more I love it, something that continues to this day.&lt;/p&gt;

&lt;p&gt;Below I talk about some of my favorite aspects of software development, which inspire me everyday to become a better programmer and learn more.&lt;/p&gt;

&lt;h2 id=&quot;infinite-learning-opportunity&quot;&gt;Infinite Learning Opportunity&lt;/h2&gt;
&lt;p&gt;I’m a nerd and I ain’t afraid to say it. I love to learn. I can and do happily spend an hour or 2 down a Wikipedia rabbit hole about mid-19th century South American interstate relations or read some weird hard sci-fi book—shout out to Isaac Asamov, Ted Chiang and Liu Cixin.&lt;/p&gt;

&lt;p&gt;The number 1 thing that I love about programming is that there is pretty much infinite learning opportunity. As much as you know, there is a helluva lot more out there. Even if you’ve mastered a certain field, you have to keep learning the fire hose of new technologies and implementations coming out or you’ll be practically a relic within 5 years.&lt;/p&gt;

&lt;p&gt;But unlike my Wikipedia rabbit holes, almost all the learning in programming is applied, so you can actually put it to use to make some cool stuff. To sweeten the deal, most everything you need to know can be found free online. That’s pretty darn cool.&lt;/p&gt;

&lt;h2 id=&quot;interesting-work&quot;&gt;Interesting Work&lt;/h2&gt;
&lt;p&gt;As a programmer, you get to work on interesting problems, and create solutions that have a genuine impact on the world. Plus, every project is different, requiring you to learn more and implement novel solutions. Those are both pretty great things to have in a job.&lt;/p&gt;

&lt;p&gt;And one thing that I love about programming is the instant gratification. Even if this isn’t talked about so much, I suspect it’s one of the chief reasons people get into programming (along with lack of athletic ability). When you’re working on something you just have to run it and you get instant feedback. Either it works or it doesn’t. More likely than not, it won’t work the first time, so you iterate until the feature works. And boom, you see it there on your screen. It gives you a little dopamine hit, and pushes you to keep going, and going and going.&lt;/p&gt;

&lt;h2 id=&quot;remote-friendliness&quot;&gt;Remote Friendliness&lt;/h2&gt;
&lt;p&gt;With 30mbs of internet and a decent laptop, you can probably work as a developer regardless of where you are (timezone permitting). This is maybe the single most appealing thing about becoming a developer  to me, as I’m a passionate traveler and devoted believer in the efficacy of remote work.&lt;/p&gt;

&lt;p&gt;I have been living abroad for the last 4 years and working remotely for US companies for 2 years prior to devoting myself to learning software full-time, from my current home in Medellin, Colombia. The prospect of having a career that gives me the flexibility to work from anywhere is deeply personally appealing.&lt;/p&gt;

&lt;p&gt;With that being said, I’ve accepted the fact that for the first couple of years of my developer career I’ll likely have to be in person as many companies only do entry-level jobs in person, and I look forward to learning from more senior developers. But as of now, it is my ultimate goal to return to remote work at some point in the not too distant future, be it in 1 year, 3 or 5.&lt;/p&gt;

&lt;h2 id=&quot;good-salaries&quot;&gt;Good Salaries&lt;/h2&gt;
&lt;p&gt;Being a developer pays. it is no secret. This is of course one of my main motivations for becoming a software developer. Anyone who says otherwise is probably a liar.&lt;/p&gt;

&lt;p&gt;Moreover, software development is probably the single best way to earn a good US salary while living outside the country, which as noted above, is very important to me.&lt;/p&gt;

&lt;p&gt;Earning a boatload of cash isn’t my principal motivation for become a developer—if making lots of money were my main goal i would have gotten into finance or gone to law school—but it certainly is something that matters to me, especially as i leave my early 20s and get into the meat of adulthood and pay for my own health insurance (thanks Obama for getting me to 26 on the parent’s tab though!).&lt;/p&gt;

&lt;h2 id=&quot;future-proof&quot;&gt;Future-Proof*&lt;/h2&gt;
&lt;p&gt;Software isn’t going anywhere…it’s going everywhere! Basically every company is a tech company these days, and if they’re not they probably should be. They need people to make that technology, and due to some gross inadequacies in the US educational system, there’s a severe shortage of practitioners in software development.&lt;/p&gt;

&lt;p&gt;So ample job opportunities will exist for software developers for the foreseeable future. That’s something I certainly have in mind as I enjoy being gainfully employed.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;*Now I don’t think software development is necessarily future-proof indefinitely. Who knows what the economy of 20 year from now…certainly not me. But I am quite confident that being a software developer is a secure job choice for the foreseeable future, say the next 20 years or so.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion-just-the-beginning&quot;&gt;Conclusion: Just the Beginning&lt;/h2&gt;
&lt;p&gt;I’m just at the beginning of my journey into the world of software development, but so far I love it, and that’s only increasing. I have a long way to go, and I’m looking forward to every step of it.&lt;/p&gt;</content><author><name>Ben Perlmutter</name></author><summary type="html">I can put an exact date on when I decided I wanted to become a software developer. It was the night before my 25th birthday, November 1, 2019. I was in Mexico City on vacation. I’d decided to go to CDMX for my birthday because my birthday, November 2, is also the Day of the Dead and that’s always something I’ve wanted to experience. And probably more importantly, I have a deep aversion to all the attention you get on your birthday. I wanted to not just escape that in a foreign country, but have it be overwhelmed by the attention granted to another holiday. Plus, tacos al pastor, tequila, mesoamerican pyramids, mole, and more tacos al pastor. (Side note: I gained at least 5 pounds during my 2 weeks in Mexico.)</summary></entry></feed>